import pytest
from contextlib import nullcontext as does_not_raise
from ..hash_data import hash_data, HASH_LENGTH
from ..lvp import LVP
from ..sign import Sign, SIGN_PK_LENGTH


valid_vp_sign_pk, _ = Sign.create_sign_keypair()
another_valid_vp_sign_pk, _ = Sign.create_sign_keypair()
valid_voting_id = bytes(32)


@pytest.mark.parametrize(
	'vp_sign_pk_list, voting_id, expectation',
	[
		(
			[],
			valid_voting_id,
			does_not_raise()
		),
		(
			[valid_vp_sign_pk],
			valid_voting_id,
			does_not_raise()
		),
		(
			'invalid data type',
			bytes(HASH_LENGTH),
			pytest.raises(TypeError)
		),
		(
			[],
			bytes(HASH_LENGTH - 1),
			pytest.raises(ValueError)
		),
		(
			[],
			bytes(HASH_LENGTH).hex()[0:32],
			pytest.raises(TypeError)
		),
		(
			['invalid data type'],
			bytes(HASH_LENGTH),
			pytest.raises(TypeError)
		),
	]
)
def test_initialize_lvp(vp_sign_pk_list, voting_id, expectation):
	with expectation:
		lvp = LVP(vp_sign_pk_list, voting_id)


@pytest.mark.parametrize(
	'vp_sign_pk, checked_vp_sign_pk, result, expectation',
	[
		(
			valid_vp_sign_pk,
			valid_vp_sign_pk,
			True,
			does_not_raise()
		),
		(
			valid_vp_sign_pk,
			another_valid_vp_sign_pk,
			False,
			does_not_raise()
		),
		(
			valid_vp_sign_pk,
			bytes(SIGN_PK_LENGTH - 1),
			None,
			pytest.raises(ValueError)
		),
		(
			valid_vp_sign_pk,
			'invalid data type',
			None,
			pytest.raises(TypeError)
		)
	]
)
def test_check(vp_sign_pk, checked_vp_sign_pk, result, expectation):
	with expectation:
		lvp = LVP([vp_sign_pk], valid_voting_id)
		assert lvp.check(checked_vp_sign_pk) == result


@pytest.mark.parametrize(
	'lvp, vp_sign_pk_list, result, expectation',
	[
		(
			LVP([valid_vp_sign_pk], valid_voting_id),
			[valid_vp_sign_pk],
			[hash_data(valid_vp_sign_pk)],
			does_not_raise()
		),
		(
			LVP([valid_vp_sign_pk], valid_voting_id),
			[another_valid_vp_sign_pk],
			[hash_data(valid_vp_sign_pk), hash_data(another_valid_vp_sign_pk)],
			does_not_raise()
		),
		(
			LVP([], valid_voting_id),
			[],
			None,
			pytest.raises(ValueError)
		),
		(
			LVP([], valid_voting_id),
			['any data type'],
			None,
			pytest.raises(TypeError)
		),
		(
			LVP([], valid_voting_id),
			[bytes(SIGN_PK_LENGTH - 1)],
			None,
			pytest.raises(ValueError)
		),
	]
)
def test_append(lvp, vp_sign_pk_list, result, expectation):
	with expectation:
		lvp.append(vp_sign_pk_list)
		assert lvp.get_list() == result
