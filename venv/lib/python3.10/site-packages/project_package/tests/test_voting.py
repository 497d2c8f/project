import pytest
from contextlib import nullcontext as does_not_raise
from ..voting import Voting
from ..sign import Sign, SIGN_PK_LENGTH, SIGN_LENGTH
from ..key import Key, KEM_PK_LENGTH
from ..lvp import LVP
from Crypto.Random import get_random_bytes


valid_sign_pk, valid_sign_sk = Sign.create_sign_keypair()
valid_sign_pk_1 = Sign.create_sign_keypair()[0]
valid_sign_pk_2 = Sign.create_sign_keypair()[0]
valid_kem_pk = Key.create_kem_keypair()[0]

voting = Voting(valid_sign_pk, valid_kem_pk, 'question', 'description', ['option_1', 'option_2'])
voting_with_another_author = Voting(get_random_bytes(SIGN_PK_LENGTH), valid_kem_pk, 'question', 'description', ['option_1', 'option_2'])
voting_id = voting.get_v_id()

lvp = LVP([valid_sign_pk_1, valid_sign_pk_2], voting_id)
valid_s_a_lvp = Sign(lvp, valid_sign_pk, valid_sign_sk)
invalid_s_a_lvp = Sign(lvp, valid_sign_pk, valid_sign_sk)
invalid_s_a_lvp._Sign__sign = get_random_bytes(SIGN_LENGTH)

valid_d_m_pk = {valid_sign_pk: valid_kem_pk, get_random_bytes(SIGN_PK_LENGTH): get_random_bytes(KEM_PK_LENGTH)}
d_m_pk_with_invalid_sign_pk = {'invalid_sign_pk': valid_kem_pk, get_random_bytes(SIGN_PK_LENGTH): get_random_bytes(KEM_PK_LENGTH)}
d_m_pk_with_invalid_kem_pk = {valid_sign_pk: 'invalid_kem_pk', get_random_bytes(SIGN_PK_LENGTH): get_random_bytes(KEM_PK_LENGTH)}


@pytest.mark.parametrize(
	'sign_pk, kem_pk, question, description, options, expectation',
	[
		(
			valid_sign_pk,
			valid_kem_pk,
			'valid_question',
			'valid_description',
			['single_valid_option'],
			does_not_raise()
		),
		(
			valid_sign_pk,
			valid_kem_pk,
			'valid_question',
			'valid_description',
			['valid_option_1', 'valid_option_2'],
			does_not_raise()
		),
		(
			'invalid_sign_pk',
			'invalid_kem_pk',
			'valid_question',
			'valid_description',
			['valid_option_1', 'valid_option_2'],
			pytest.raises(TypeError)
		),
		(
			get_random_bytes(SIGN_PK_LENGTH - 1),
			get_random_bytes(KEM_PK_LENGTH - 1),
			'valid_question',
			'valid_description',
			['valid_option_1', 'valid_option_2'],
			pytest.raises(ValueError)
		),
		(
			valid_sign_pk,
			valid_kem_pk,
			b'invalid_question',
			'valid_description',
			['single_valid_option'],
			pytest.raises(TypeError)
		),
		(
			valid_sign_pk,
			valid_kem_pk,
			'valid_question',
			b'invalid_description',
			['single_valid_option'],
			pytest.raises(TypeError)
		),
		(
			valid_sign_pk,
			valid_kem_pk,
			'valid_question',
			'valid_description',
			[b'single_invalid_option'],
			pytest.raises(TypeError)
		),
	]
)
def test_initialize_voting(sign_pk, kem_pk, question, description, options, expectation):
	with expectation:
		voting = Voting(sign_pk, kem_pk, question, description, options)


@pytest.mark.parametrize(
	'voting, s_a_lvp, expectation',
	[
		(
			voting,
			valid_s_a_lvp,
			does_not_raise()
		),
		(
			voting,
			invalid_s_a_lvp,
			pytest.raises(Exception)
		),
		(
			voting_with_another_author,
			valid_s_a_lvp,
			pytest.raises(Exception)
		),
	]
)
def test_set_s_a_lvp(voting, s_a_lvp, expectation):
	with expectation:
		voting.set_s_a_lvp(s_a_lvp)


@pytest.mark.parametrize(
	'voting, d_m_pk, expectation',
	[
		(
			voting,
			valid_d_m_pk,
			does_not_raise()
		),
		(
			voting,
			[],
			pytest.raises(TypeError)
		),
		(
			voting,
			d_m_pk_with_invalid_kem_pk,
			pytest.raises(TypeError)
		),
		(
			voting,
			d_m_pk_with_invalid_sign_pk,
			pytest.raises(TypeError)
		)
	]
)
def test_set_d_m_pk(voting, d_m_pk, expectation):
	with expectation:
		voting.set_d_m_pk(d_m_pk)


@pytest.mark.parametrize(
	'voting, d_m_pk, d_sel_m_pk, expectation',
	[
		(
			voting,
			valid_d_m_pk,
			{'m_sign_pk': valid_sign_pk, 'm_kem_pk': valid_kem_pk},
			does_not_raise()
		),
		(
			voting,
			valid_d_m_pk,
			{'m_sign_pk': get_random_bytes(SIGN_PK_LENGTH), 'm_kem_pk': valid_kem_pk},
			pytest.raises(Exception)
		),
		(
			voting,
			valid_d_m_pk,
			{'m_sign_pk': valid_sign_pk, 'm_kem_pk': get_random_bytes(KEM_PK_LENGTH)},
			pytest.raises(Exception)
		),
		(
			voting,
			valid_d_m_pk,
			{'m_sign_pk': 'invalid_sign_pk', 'm_kem_pk': get_random_bytes(KEM_PK_LENGTH)},
			pytest.raises(TypeError)
		),
		(
			voting,
			valid_d_m_pk,
			{'m_sign_pk': valid_sign_pk, 'm_kem_pk': 'invalid_kem_pk'},
			pytest.raises(TypeError)
		)
	]
)
def test_set_d_sel_m_pk(voting, d_m_pk, d_sel_m_pk, expectation):
	with expectation:
		voting.set_d_m_pk(d_m_pk)
		voting.set_d_sel_m_pk(d_sel_m_pk)
