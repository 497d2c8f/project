import pytest
from ..sign import Sign, SIGN_PK_LENGTH, SIGN_LENGTH
from Crypto.Random import get_random_bytes
from contextlib import nullcontext as does_not_raise


valid_keypair = Sign.create_sign_keypair()
invalid_data = get_random_bytes(100)
invalid_signature = get_random_bytes(SIGN_LENGTH)
invalid_author_pk = get_random_bytes(SIGN_PK_LENGTH)


@pytest.fixture(
	scope='function',
	params=[
		bytes(32),
		'text',
		1234,
		3.14,
		Exception,
		None,
		[1234]
	]
)
def setup_data(request):
	data = request.param
	valid_sign = Sign(data, *valid_keypair)
	return {
		'data': data,
		'valid_sign': valid_sign
	}


@pytest.mark.parametrize(
	'data, keypair, expectation',
	[
		(
			'data',
			valid_keypair,
			does_not_raise()
		),
		(
			'data',
			('invalid_sign_pk', 'invalid_sign_sk'),
			pytest.raises(TypeError)
		),
		
		(
			'data',
			(get_random_bytes(SIGN_PK_LENGTH - 1), get_random_bytes(SIGN_PK_LENGTH - 1)),
			pytest.raises(ValueError)
		)
	]
)
def test_initialize_sign(data, keypair, expectation):
	with expectation:
		sign = Sign(data, *keypair)


def test_check_equality_of_valid_signs(setup_data):
	data = setup_data['data']
	valid_sign = setup_data['valid_sign']
	new_valid_sign = Sign(data, *valid_keypair)
	assert valid_sign.get_sign() == new_valid_sign.get_sign()
	

def test_verify_valid_sign(setup_data):
	valid_sign = setup_data['valid_sign']
	assert valid_sign.verify() == True


def test_verify_invalid_sign(setup_data):
	invalid_sign = setup_data['valid_sign']
	invalid_sign._Sign__sign = invalid_signature
	assert invalid_sign.verify() == False


def test_verify_valid_sign_with_invalid_data(setup_data):
	valid_sign_with_invalid_data = setup_data['valid_sign']
	valid_sign_with_invalid_data._Sign__data = invalid_data
	assert valid_sign_with_invalid_data.verify() == False


def test_verify_valid_sign_with_invalid_author_pk(setup_data):
	valid_sign_with_invalid_author_pk = setup_data['valid_sign']
	valid_sign_with_invalid_author_pk._Sign__author_pk = invalid_author_pk
	assert valid_sign_with_invalid_author_pk.verify() == False


def test_create_sign_keypair():
	keypair1 = Sign.create_sign_keypair()
	keypair2 = Sign.create_sign_keypair()
	assert keypair1 != keypair2
