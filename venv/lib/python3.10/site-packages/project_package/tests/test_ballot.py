import pytest
from Crypto.Random import get_random_bytes
from contextlib import nullcontext as does_not_raise
from ..hash_data import HASH_LENGTH
from ..ballot import Ballot


valid_voting_id = bytes(HASH_LENGTH)
valid_choice_1 = 1
valid_choice_0 = 0


@pytest.mark.parametrize(
	'voting_id, choice, expectation',
	[
		(
			valid_voting_id,
			valid_choice_1,
			does_not_raise()
		),
		(
			valid_voting_id,
			valid_choice_0,
			does_not_raise()
		),
		(
			'invalid voting id type',
			valid_choice_1,
			pytest.raises(TypeError)
		),
		(
			get_random_bytes(HASH_LENGTH - 1),
			valid_choice_1,
			pytest.raises(ValueError)
		),
		(
			valid_voting_id,
			-1,
			pytest.raises(ValueError)
		),
		(
			valid_voting_id,
			3.14,
			pytest.raises(TypeError)
		),
		(
			valid_voting_id,
			'invalid choice type',
			pytest.raises(TypeError)
		)
	]
)
def test_initialize_ballot(voting_id, choice, expectation):
	with expectation:
		ballot = Ballot(voting_id, choice)
