import pytest
from contextlib import nullcontext as does_not_raise
from ..hash_data import hash_data


#@pytest.fixture(scope='function', autouse=True)
#def setup_data():
#	print('enter_create_data')
#	yield
#	print('exit_create_data')


@pytest.mark.parametrize(
	'data, salt, iterations, result, expectation',
	[
		(
			1234,
			1234,
			1,
			b'\xa4\xa5\xab\x8f\xebF\xfc\xfcJ\xb2\xb3\x84\x9c\x9c%\xfb\xb5\x156\xc4\x1a*\xd0\xe5\x80%O\x90\x9b\x14\x87\xa8',
			does_not_raise()
		),
		(
			'text',
			'text',
			1,
			b'v\x85do\xfe\xcc\x18\x153K\xcb9\x9e\xc8\xa8\xb3o\x8f\x8c\x0f\x99>\xb0)\xfb\xbe\xf5_QWO\xa7',
			does_not_raise()
		),
		(
			bytes(32),
			bytes(32),
			1,
			b'\x07\x0f\xa1\xabo\xccU~\xd1MB\x94\x1f\x19gi0HU\x1e\xb9\x04*\x8d\n\x05z\xfb\xd7^\x81\xe0',
			does_not_raise()
		),
		(
			bytes(32),
			bytes(32),
			'invalid data type',
			None,
			pytest.raises(TypeError)
		),
		(
			bytes(32),
			bytes(32),
			0,
			None,
			pytest.raises(ValueError)
		),
		(
			bytes(32),
			None,
			2,
			hash_data(hash_data(bytes(32))),
			does_not_raise()
		)
	]
)
def test_hash_data(data, salt, iterations, result, expectation):
	with expectation:
		hash_ = hash_data(data, salt, iterations)
		assert hash_ == result
