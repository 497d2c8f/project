import pytest
from contextlib import nullcontext as does_not_raise
from ..ciphertext import Ciphertext
from Crypto.Random import get_random_bytes


@pytest.mark.parametrize(
	'data, key, expectation',
	[
		(
			1234,
			1234,
			does_not_raise()
		),
		(
			'text',
			'text',
			does_not_raise()
		),
		(
			bytes(32),
			bytes(32),
			does_not_raise()
		),
		(
			Exception,
			Exception,
			does_not_raise()
		)
	]
)
def test_ciphertext(data, key, expectation):
	ciphertext = Ciphertext(data, key)
	with expectation:
		decrypted_data = ciphertext.decrypt(key)
		assert decrypted_data == data


def test_ciphertext_with_invalid_ciphertext():
	data = key = 1234
	ciphertext = Ciphertext(data, key)
	ciphertext._Ciphertext__ciphertext = get_random_bytes(100)
	with pytest.raises(ValueError):
		decrypted_data = ciphertext.decrypt(key)


def test_ciphertext_with_invalid_hmac():
	data = key = 1234
	ciphertext = Ciphertext(data, key)
	ciphertext._Ciphertext__hmac = get_random_bytes(100)
	with pytest.raises(ValueError):
		decrypted_data = ciphertext.decrypt(key)
