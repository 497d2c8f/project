import pytest
from ..key import Key, KEM_PK_LENGTH
from ..sign import Sign, SIGN_PK_LENGTH
from ..ciphertext import Ciphertext
from Crypto.Random import get_random_bytes
from contextlib import nullcontext as does_not_raise


valid_keypairs = *Sign.create_sign_keypair(), *Key.create_kem_keypair()


@pytest.fixture(
	params=[
		bytes(32),
		'text',
		1234,
		3.14,
		Exception,
		None,
		[1234]
	]
)
def valid_password(request):
	valid_password = request.param
	return valid_password


@pytest.mark.parametrize(
	'sign_pk, kem_pk, expectation',
	[
		(
			valid_keypairs[0],
			valid_keypairs[2],
			does_not_raise()
		),
		(
			'invalid_sign_pk',
			'invalid_kem_pk',
			pytest.raises(TypeError)
		),
		(
			get_random_bytes(SIGN_PK_LENGTH - 1),
			get_random_bytes(KEM_PK_LENGTH - 1),
			pytest.raises(ValueError)
		)
	]
)
def test_initialize_key(valid_password, sign_pk, kem_pk, expectation):
	with expectation:
		encrypted_password = Key(valid_password, sign_pk, kem_pk)


def test_get_key(valid_password):
	sign_pk, sign_sk, kem_pk, kem_sk = valid_keypairs
	encrypted_password = Key(valid_password, sign_pk, kem_pk)
	decrypted_password = encrypted_password.get_key(kem_sk)
	assert valid_password == decrypted_password


def test_get_key_with_invalid_ciphertext(valid_password):
	sign_pk, sign_sk, kem_pk, kem_sk = valid_keypairs
	encrypted_password = Key(valid_password, sign_pk, kem_pk)
	encrypted_password._Key__ciphertext._Ciphertext__ciphertext = get_random_bytes(100)
	with pytest.raises(ValueError):
		decrypted_password = encrypted_password.get_key(kem_sk)


def test_get_key_with_invalid_challenge(valid_password):
	sign_pk, sign_sk, kem_pk, kem_sk = valid_keypairs
	encrypted_password = Key(valid_password, sign_pk, kem_pk)
	encrypted_password._Key__challenge = get_random_bytes(100)
	with pytest.raises(Ciphertext.DecryptionError):
		decrypted_password = encrypted_password.get_key(kem_sk)


def test_create_kem_keypair():
	sign_pk, sign_sk, kem_pk, kem_sk = valid_keypairs
	keypair1 = Key.create_kem_keypair()
	keypair2 = Key.create_kem_keypair()
	assert keypair1 != keypair2
