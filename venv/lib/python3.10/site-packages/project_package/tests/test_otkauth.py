import pytest
from contextlib import nullcontext as does_not_raise
from ..hash_data import hash_data, HASH_LENGTH
from ..otkauth import OTK, MAX_STACK_NUMBER, MAX_HASH_NUMBER
from Crypto.Random import get_random_bytes


valid_main_key = bytes(HASH_LENGTH)
valid_prefix = bytes(HASH_LENGTH)
max_valid_stack_number = MAX_STACK_NUMBER
max_valid_hash_number = MAX_HASH_NUMBER


valid_otk_request = OTK.Request(valid_prefix, max_valid_stack_number, max_valid_hash_number)
valid_current_otk = OTK(valid_main_key, valid_otk_request)
valid_otk_request_for_update = valid_current_otk.get_request_for_update()
valid_next_otk = OTK(valid_main_key, valid_otk_request_for_update)


@pytest.mark.parametrize(
	'prefix, stack_number, hash_number, expectation',
	[
		(
			valid_prefix,
			max_valid_stack_number,
			max_valid_hash_number,
			does_not_raise()
		),
		(
			'invalid_prefix',
			max_valid_stack_number,
			max_valid_hash_number,
			pytest.raises(TypeError)
		),
		(
			b'prefix_bytes_with_invalid_lengthhh',
			max_valid_stack_number,
			max_valid_hash_number,
			pytest.raises(ValueError)
		),
		(
			valid_prefix,
			0,
			max_valid_hash_number,
			pytest.raises(ValueError)
		),
		(
			valid_prefix,
			max_valid_stack_number + 1,
			max_valid_hash_number,
			pytest.raises(ValueError)
		),
		(
			valid_prefix,
			'invalid_stack_number_type',
			max_valid_hash_number,
			pytest.raises(TypeError)
		),
		(
			valid_prefix,
			max_valid_stack_number,
			0,
			pytest.raises(OTK.UpdateError)
		),
		(
			valid_prefix,
			max_valid_stack_number,
			max_valid_hash_number + 1,
			pytest.raises(ValueError)
		),
		(
			valid_prefix,
			max_valid_stack_number,
			'invalid_hash_number_type',
			pytest.raises(TypeError)
		),
	]
)
def test_initialize_otk_request(prefix, stack_number, hash_number, expectation):
	with expectation:
		otk_request = OTK.Request(prefix, stack_number, hash_number)


@pytest.mark.parametrize(
	'main_key, otk_request, expectation',
	[
		(
			valid_main_key,
			valid_otk_request,
			does_not_raise()
		),
		(
			b'main_key_with_invalid_length',
			valid_otk_request,
			pytest.raises(ValueError)
		),
		(
			'main_key_with_invalid_type',
			valid_otk_request,
			pytest.raises(TypeError)
		),
	]
)
def test_initialize_otk(main_key, otk_request, expectation):
	with expectation:
		otk = OTK(main_key, otk_request)


def test_update_valid_current_otk():

	valid_current_otk.update(valid_next_otk)
	valid_current_otk_data = valid_current_otk.get_data()

	expected_prefix = valid_prefix
	expected_stack_number = max_valid_stack_number - 1
	expected_hash_number = max_valid_hash_number
	expected_current_hash_preimage = hash_data(valid_main_key, salt=(valid_prefix, max_valid_stack_number - 1), iterations=max_valid_hash_number - 1)
	expected_current_hash = hash_data(expected_current_hash_preimage)
	expected_next_hash_1 = hash_data(valid_main_key, salt=(valid_prefix, max_valid_stack_number - 2), iterations=max_valid_hash_number)
	expected_verification_hash_1 = hash_data(expected_current_hash_preimage + expected_next_hash_1)

	expected_valid_current_otk_data = {
		'prefix': expected_prefix,
		'stack_number': expected_stack_number,
		'hash_number': expected_hash_number,
		'current_hash': expected_current_hash,
		'next_hash': expected_next_hash_1,
		'verification_hash': expected_verification_hash_1
	}

	assert valid_current_otk_data == expected_valid_current_otk_data


def test_update_current_otk_with_invalid_verification_hash():

	current_otk_with_invalid_verification_hash = OTK(valid_main_key, valid_otk_request)
	current_otk_with_invalid_verification_hash._OTK__verification_hash = get_random_bytes(HASH_LENGTH)
	current_otk_with_invalid_verification_hash.update(valid_next_otk)
	current_otk_with_invalid_verification_hash_data = current_otk_with_invalid_verification_hash.get_data()

	expected_prefix = valid_prefix
	expected_stack_number = max_valid_stack_number
	expected_hash_number = max_valid_hash_number - 1
	expected_current_hash_preimage = hash_data(valid_main_key, salt=(valid_prefix, max_valid_stack_number), iterations=max_valid_hash_number - 2)
	expected_current_hash = hash_data(expected_current_hash_preimage)
	expected_next_hash_1_preimage = hash_data(valid_main_key, salt=(valid_prefix, max_valid_stack_number - 1), iterations=max_valid_hash_number - 1)
	expected_next_hash_2 = hash_data(valid_main_key, salt=(valid_prefix, max_valid_stack_number - 2), iterations=max_valid_hash_number)
	expected_verification_hash_2 = hash_data(expected_next_hash_1_preimage + expected_next_hash_2)

	expected_current_otk_with_invalid_verification_hash_data = {
		'prefix': expected_prefix,
		'stack_number': expected_stack_number,
		'hash_number': expected_hash_number,
		'current_hash': expected_current_hash,
		'next_hash': expected_next_hash_2,
		'verification_hash': expected_verification_hash_2
	}

	assert current_otk_with_invalid_verification_hash_data == expected_current_otk_with_invalid_verification_hash_data


def test_update_current_otk_with_invalid_verification_hash_more_than_the_allowed_number_of_hash():

	hash_number = 3
	valid_otk_request = OTK.Request(valid_prefix, max_valid_stack_number, hash_number)
	current_otk_with_invalid_verification_hash = OTK(valid_main_key, valid_otk_request)
	with pytest.raises(OTK.UpdateError):
		for n in range(hash_number):
			current_otk_with_invalid_verification_hash._OTK__verification_hash = get_random_bytes(HASH_LENGTH)
			valid_otk_request_for_update = current_otk_with_invalid_verification_hash.get_request_for_update()
			valid_next_otk = OTK(valid_main_key, valid_otk_request_for_update)
			current_otk_with_invalid_verification_hash.update(valid_next_otk)


def test_update_valid_current_otk_max_number_of_hash_with_min_stack_number():

	min_stack_number = 1
	min_hash_number = 1
	valid_otk_request = OTK.Request(valid_prefix, min_stack_number, max_valid_hash_number)
	valid_current_otk = OTK(valid_main_key, valid_otk_request)

	with does_not_raise():
		for _ in range(max_valid_hash_number - 1):
			valid_current_otk_request_for_update = valid_current_otk.get_request_for_update()
			valid_next_otk = OTK(valid_main_key, valid_current_otk_request_for_update)
			valid_current_otk.update(valid_next_otk)

	valid_final_otk_request = OTK.Request(valid_prefix, min_stack_number, min_hash_number)
	valid_final_otk = OTK(valid_main_key, valid_final_otk_request)
	valid_final_otk_data = valid_final_otk.get_data()
	valid_current_otk_data = valid_current_otk.get_data()
	assert valid_final_otk_data == valid_current_otk_data

	with pytest.raises(OTK.UpdateError):
		valid_current_otk_request_for_update = valid_current_otk.get_request_for_update()
		valid_next_otk = OTK(valid_main_key, valid_current_otk_request_for_update)
		valid_current_otk.update(valid_next_otk)


def test_update_valid_current_otk_with_stack_number_equal_to_2():

	stack_number = 2
	valid_otk_request = OTK.Request(valid_prefix, stack_number, max_valid_hash_number)
	valid_current_otk = OTK(valid_main_key, valid_otk_request)
	valid_otk_request_for_update = valid_current_otk.get_request_for_update()
	valid_next_otk = OTK(valid_main_key, valid_otk_request_for_update)
	valid_next_otk_data = valid_next_otk.get_data()

	assert valid_next_otk_data['next_hash'] == bytes(32)
	assert valid_next_otk_data['verification_hash'] == bytes(32)

	valid_current_otk.update(valid_next_otk)
	# valid_current_otk_stack_number = 1
	valid_current_otk_data = valid_current_otk.get_data()

	assert valid_current_otk_data['next_hash'] == bytes(32)
	assert valid_current_otk_data['verification_hash'] == bytes(32)

	valid_otk_request_for_update = valid_current_otk.get_request_for_update()
	valid_next_otk = OTK(valid_main_key, valid_otk_request_for_update)
	valid_next_otk_data = valid_next_otk.get_data()

	assert valid_next_otk_data['hash_number'] == 255
	assert valid_next_otk_data['next_hash'] == bytes(32)
	assert valid_next_otk_data['verification_hash'] == bytes(32)
	assert valid_current_otk_data['current_hash'] == hash_data(valid_next_otk_data['current_hash'])

	valid_current_otk.update(valid_next_otk)
	# valid_current_otk_stack_number_still = 1
	valid_current_otk_data = valid_current_otk.get_data()

	assert valid_current_otk_data['hash_number'] == 255
	assert valid_current_otk_data['next_hash'] == bytes(32)
	assert valid_current_otk_data['verification_hash'] == bytes(32)
