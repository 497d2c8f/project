from pqc.kem import kyber1024 as kem_alg
from .ciphertext import Ciphertext
from .check  import check_data_type, check_bytes_length
from .sign import Sign, SIGN_PK_LENGTH


KEM_PK_LENGTH = len(kem_alg.keypair()[0])
KEM_SK_LENGTH = len(kem_alg.keypair()[1])


class Key:

	def __init__(self, key, recipient_sign_pk, recipient_kem_pk):
		Sign._check_sign_pk(recipient_sign_pk)
		Key._check_kem_pk(recipient_kem_pk)
		shared_secret, challenge = kem_alg.encap(recipient_kem_pk)
		self.__ciphertext = Ciphertext(key, shared_secret)
		self.__challenge = challenge
		self.__recipient_sign_pk = recipient_sign_pk
		self.__recipient_kem_pk = recipient_kem_pk

	def __lt__(self, other):
		return self.__ciphertext < other.__ciphertext

	def get_key(self, recipient_kem_sk):
		shared_secret = kem_alg.decap(self.__challenge, recipient_kem_sk)
		key = self.__ciphertext.decrypt(shared_secret)
		return key

	def get_recipient_keys(self):
		return self.__recipient_sign_pk, self.__recipient_kem_pk

	@staticmethod
	def create_kem_keypair():
		pk, sk = kem_alg.keypair()
		return pk, sk

	def _check_recipient_sign_pk(recipient_sign_pk):
		check_data_type(recipient_sign_pk, bytes)
		check_bytes_length(recipient_sign_pk, SIGN_PK_LENGTH)

	def _check_kem_pk(kem_pk):
		check_data_type(kem_pk, bytes)
		check_bytes_length(kem_pk, KEM_PK_LENGTH)

	def _check_kem_sk(kem_sk):
		check_data_type(kem_sk, bytes)
		check_bytes_length(kem_sk, KEM_SK_LENGTH)
