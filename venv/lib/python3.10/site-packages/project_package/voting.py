from .check  import check_data_type, check_bytes_length
from .hash_data import hash_data
from .sign import Sign
from .key import Key


class Voting:

	__a_sign_pk = b''
	__a_kem_pk = b''
	__d_m_pk = {}
	__d_sel_m_pk = {}
	__question = ''
	__description = ''
	__options = ['']
	__s_a_lvp = None

	def __init__(self, a_sign_pk, a_kem_pk, question, description, options):
		Sign._check_sign_pk(a_sign_pk)
		Key._check_kem_pk(a_kem_pk)
		check_data_type(question, str)
		check_data_type(description, str)
		if isinstance(options, list):
			for option in options:
				check_data_type(option, str)
		self.__a_sign_pk = a_sign_pk
		self.__a_kem_pk = a_kem_pk
		self.__question = question
		self.__description = description
		self.__options = options
		self.__v_id = hash_data([question, description, options])

	def get_data(self):
		return {
			'question': self.__question,
			'description': self.__description,
			'options': self.__options
		}

	def get_keys(self):
		return {
			'a_sign_pk': self.__a_sign_pk,
			'a_kem_pk': self.__a_kem_pk,
			'd_m_pk': self.__d_m_pk,
			'd_sel_m_pk': self.__d_sel_m_pk
		}

	def set_s_a_lvp(self, s_a_lvp):
		if not s_a_lvp.verify():
			 raise Exception('подпись не прошла проверку')
		if s_a_lvp.get_author_pk() != self.__a_sign_pk:
			raise Exception('автор подписи не является автором голосования')
		self.__s_a_lvp = s_a_lvp

	def get_s_a_lvp(self):
		return self.__s_a_lvp

	def get_v_id(self):
		return self.__v_id

	def pretty_text(self):
		pretty_text = f'\n{self.__question}\n\n{self.__description}\n'
		for index, option in enumerate(self.__options):
			pretty_text += f'\n{index}: {option}'
		return pretty_text

	def set_d_m_pk(self, d_m_pk):
		check_data_type(d_m_pk, dict)
		for k, v in d_m_pk.items():
			Sign._check_sign_pk(k)
			Key._check_kem_pk(v)
		self.__d_m_pk = d_m_pk

	def set_d_sel_m_pk(self, d_sel_m_pk):
		check_data_type(d_sel_m_pk, dict)
		m_sign_pk = d_sel_m_pk['m_sign_pk']
		m_kem_pk = d_sel_m_pk['m_kem_pk']
		Sign._check_sign_pk(m_sign_pk)
		Key._check_kem_pk(m_kem_pk)
		if m_sign_pk not in self.__d_m_pk:
			raise Exception(f'Этого посредника {m_sign_pk[0:8].hex()} нет в списке зарегистрированных посредников')
		if self.__d_m_pk[m_sign_pk] != m_kem_pk:
			raise Exception(f'У посредника {m_sign_pk[0:8].hex()} не совпадают ключи m_kem_pk')
		self.__d_sel_m_pk = d_sel_m_pk
