from django.contrib.auth.backends import *
from project_package.serialization import *
from project_package.otkauth import OTK


class OTKAuthBackend(ModelBackend):

	def authenticate(self, request=None, username=None, password=None, **kwargs):
		if username is None:
			username = kwargs.get(UserModel.USERNAME_FIELD)
		if username is None or password is None:
			return
		try:
			user = UserModel._default_manager.get_by_natural_key(username)
		except UserModel.DoesNotExist:
			# Run the default password hasher once to reduce the timing
			# difference between an existing and a nonexistent user (#20760).
			UserModel().set_password(password)
		else:
			current_otk = deserialize_from_string(user.password)
			next_otk = deserialize_from_string(password)
			try:
				current_otk.update(next_otk)
				user.set_password(serialize_to_string(current_otk))
				user.save()
				if self.user_can_authenticate(user):
					return user
			except:
				return None
