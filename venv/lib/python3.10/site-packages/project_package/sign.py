from pqc.sign import dilithium5 as sign_alg
from .serialization import serialize_to_string
from .check  import check_data_type, check_bytes_length


sign_pk, sign_sk = sign_alg.keypair()
SIGN_PK_LENGTH, SIGN_SK_LENGTH = len(sign_pk), len(sign_sk)
SIGN_LENGTH = len(sign_alg.sign(bytes(32), sign_sk))


class Sign:

	def __init__(self, data, author_pk, author_sk):
		Sign._check_sign_pk(author_pk)
		Sign._check_sign_sk(author_sk)
		self.__sign = sign_alg.sign(serialize_to_string(data), author_sk)
		self.__data = data
		self.__author_pk = author_pk

	def __lt__(self, other):
		return self.__sign < other.__sign

	def verify(self):
		try:
			sign_alg.verify(self.__sign, serialize_to_string(self.__data), self.__author_pk)
			return True
		except ValueError:
			return False

	def get_sign(self):
		return self.__sign

	def get_data(self):
		return self.__data

	def get_author_pk(self):
		return self.__author_pk

	@staticmethod
	def create_sign_keypair():
		pk, sk = sign_alg.keypair()
		return pk, sk

	def _check_sign_pk(sign_pk):
		check_data_type(sign_pk, bytes)
		check_bytes_length(sign_pk, SIGN_PK_LENGTH)

	def _check_sign_sk(sign_sk):
		check_data_type(sign_sk, bytes)
		check_bytes_length(sign_sk, SIGN_SK_LENGTH)
