from .hash_data import hash_data, HASH_LENGTH
from .check  import check_data_type, check_bytes_length


MAX_STACK_NUMBER = 2**32
MAX_HASH_NUMBER = 2**8


__all__ = ['OTK, MAX_STACK_NUMBER, MAX_HASH_NUMBER']


class OTK:

	__prefix = bytes(32)
	__stack_number = MAX_STACK_NUMBER
	__hash_number = MAX_HASH_NUMBER
	__current_hash = bytes(32)
	__next_hash = bytes(32)
	__verification_hash = bytes(32)

	def __init__(self, main_key, request):

		self.__check_main_key(main_key)
		request._check_request_data()

		prefix, stack_number, hash_number = request._get_data()

		current_hash, current_hash_preimage = self.__create_current_hash_and_preimage(main_key, prefix, stack_number, hash_number)

		if stack_number >= 2 and hash_number % 2 == 0:
			next_hash_1_preimage = hash_data(main_key, salt=(prefix, stack_number - 1), iterations=MAX_HASH_NUMBER - 1)
			next_hash_1 = hash_data(next_hash_1_preimage)
			verification_hash_1 = hash_data(current_hash_preimage + next_hash_1)
			self.__next_hash = next_hash_1
			self.__verification_hash = verification_hash_1
		elif stack_number >= 3 and hash_number % 2 != 0:
			next_hash_1_preimage = hash_data(main_key, salt=(prefix, stack_number - 1), iterations=MAX_HASH_NUMBER - 1)
			next_hash_2_preimage = hash_data(main_key, salt=(prefix, stack_number - 2), iterations=MAX_HASH_NUMBER - 1)
			next_hash_2 = hash_data(next_hash_2_preimage)
			verification_hash_2 = hash_data(next_hash_1_preimage + next_hash_2)
			self.__next_hash = next_hash_2
			self.__verification_hash = verification_hash_2

		self.__prefix = prefix
		self.__stack_number = stack_number
		self.__hash_number = hash_number
		self.__current_hash = current_hash

	def get_data(self):
		return {
			'prefix': self.__prefix,
			'stack_number': self.__stack_number,
			'hash_number': self.__hash_number,
			'current_hash': self.__current_hash,
			'next_hash': self.__next_hash,
			'verification_hash': self.__verification_hash
		}

	@staticmethod
	def get_request_for_id(prefix):
		return OTK.Request(prefix, MAX_STACK_NUMBER, MAX_HASH_NUMBER)

	def get_request_for_update(self):
		return self.Request(self.__prefix, self.__stack_number, self.__hash_number - 1)

	def update(self, next_otk):
		check_data_type(next_otk, type(self))
		next_otk_data = next_otk.get_data()
		self.__check_otk_is_preimage(next_otk_data)
		if self.__check_verification_hash(next_otk_data):
			self.__stack_number -= 1
			self.__hash_number = MAX_HASH_NUMBER
			self.__current_hash = self.__next_hash
			self.__next_hash = next_otk_data['next_hash']
			self.__verification_hash = next_otk_data['verification_hash']
		else:
			self.__stack_number = next_otk_data['stack_number']
			self.__hash_number = next_otk_data['hash_number']
			self.__current_hash = next_otk_data['current_hash']
			self.__next_hash = next_otk_data['next_hash']
			self.__verification_hash = next_otk_data['verification_hash']

	def __check_otk_is_preimage(self, next_otk_data):
		if hash_data(next_otk_data['current_hash']) != self.__current_hash:
			raise ValueError('Данный OTK не является прообразом текущего OTK')

	def __check_verification_hash(self, next_otk_data):
		if next_otk_data['hash_number'] % 2 != 0:
			if hash_data(next_otk_data['current_hash'] + self.__next_hash) == self.__verification_hash:
				return True
		return False

	@staticmethod
	def __check_main_key(main_key):
		check_data_type(main_key, bytes)
		check_bytes_length(main_key, HASH_LENGTH)

	@staticmethod
	def __create_current_hash_and_preimage(main_key, prefix, stack_number, hash_number):
		if hash_number >= 2:
			current_hash_preimage = hash_data(main_key, salt=(prefix, stack_number), iterations=hash_number - 1)
			current_hash = hash_data(current_hash_preimage)
		else:
			current_hash_preimage = main_key
			current_hash = hash_data(current_hash_preimage, salt=(prefix, stack_number), iterations=1)
		return current_hash, current_hash_preimage

	class UpdateError(Exception):
		pass

	class Request:

		def __init__(self, prefix, stack_number, hash_number):
			self.__prefix = prefix
			self.__stack_number = stack_number
			self.__hash_number = hash_number
			self._check_request_data()

		def _get_data(self):
			return self.__prefix, self.__stack_number, self.__hash_number
	
		def _check_request_data(self):
			check_data_type(self.__prefix, bytes)
			check_bytes_length(self.__prefix, HASH_LENGTH)
			check_data_type(self.__stack_number, int)
			if self.__stack_number < 1 or self.__stack_number > MAX_STACK_NUMBER:
				raise ValueError(f'значение stack_number должно быть целым числом от 1 до {MAX_STACK_NUMBER}, сейчас оно такое - {self.__stack_number}')
			check_data_type(self.__hash_number, int)
			if self.__hash_number == 0:
				raise OTK.UpdateError('данный OTK исчерпал количество своих обновлений')
			if self.__hash_number < 1 or self.__hash_number > MAX_HASH_NUMBER:
				raise ValueError(f'значение hash_number должно быть целым числом от 1 до {MAX_HASH_NUMBER}, сейчас оно такое - {self.__hash_number}')
