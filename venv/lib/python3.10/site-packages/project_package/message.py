from .sign import Sign
from .hash_data import hash_data


__all__ = [
	'MsgEM',
	'MsgWM1',
	'MsgMW',
	'MsgWM2',
	'MsgMA',
	'MsgVotingSummary'
]


class MsgEM:

	def __init__(self, rfp, e_emek_e_eaek_b):
		self.__rfp = rfp
		self.__e_emek_e_eaek_b = e_emek_e_eaek_b

	def get_data(self):
		return {
			'rfp': self.__rfp,
			'e_emek_e_eaek_b': self.__e_emek_e_eaek_b
		}

	def check(self, v_id, e_sign_pk):
		rfp = self.__rfp
		return rfp.get_data() == v_id and rfp.verify() and rfp.get_author_pk() == e_sign_pk


class MsgWM1:

	def __init__(self, l_e_emek_e_eaek_b):
		self.__l_e_emek_e_eaek_b = sorted(l_e_emek_e_eaek_b, key=lambda x: hash_data(x))

	def get_data(self):
		return {
			'l_e_emek_e_eaek_b': self.__l_e_emek_e_eaek_b
		}

	def check(self):
		sorted_l_e_emek_e_eaek_b = sorted(self.__l_e_emek_e_eaek_b, key=lambda x: hash_data(x))
		sorted_correctly = self.__l_e_emek_e_eaek_b == sorted_l_e_emek_e_eaek_b
		return sorted_correctly


class MsgMW:

	def __init__(self, l_h_e_emek_e_eaek_b, m_sign_pk, m_sign_sk):
		self.__s_m_l_h_e_emek_e_eaek_b = Sign(sorted(l_h_e_emek_e_eaek_b), m_sign_pk, m_sign_sk)

	def get_data(self):
		return {
			's_m_l_h_e_emek_e_eaek_b': self.__s_m_l_h_e_emek_e_eaek_b
		}

	def check(self, m_sign_pk):
		l_h_e_emek_e_eaek_b = self.__s_m_l_h_e_emek_e_eaek_b.get_data()
		sorted_correctly = l_h_e_emek_e_eaek_b == sorted(l_h_e_emek_e_eaek_b)
		return self.__s_m_l_h_e_emek_e_eaek_b.verify() and self.__s_m_l_h_e_emek_e_eaek_b.get_author_pk() == m_sign_pk and sorted_correctly


class MsgWM2:

	def __init__(self, l_rfp):
		self.__l_rfp = sorted(l_rfp)

	def get_data(self):
		return {
			'l_rfp': self.__l_rfp
		}

	def check(self, v_id):
		l_rfp = self.__l_rfp
		return check_l_rfp(l_rfp, v_id)


class MsgMA:

	def __init__(self, l_rfp, l_e_eaek_b, m_sign_pk, m_sign_sk):
		l_rfp_and_l_e_eaek_b = {'l_rfp': sorted(l_rfp), 'l_e_eaek_b': sorted(l_e_eaek_b, key=lambda x: hash_data(x))}
		s_m_l_rfp_and_l_e_eaek_b = Sign(l_rfp_and_l_e_eaek_b, m_sign_pk, m_sign_sk)
		self.__s_m_l_rfp_and_l_e_eaek_b = s_m_l_rfp_and_l_e_eaek_b

	def __lt__(self, other):
		return self.__s_m_l_rfp_and_l_e_eaek_b < other.__s_m_l_rfp_and_l_e_eaek_b

	def get_data(self):
		return {
			's_m_l_rfp_and_l_e_eaek_b': self.__s_m_l_rfp_and_l_e_eaek_b
		}

	def check(self, v, m_sign_pk):
		v_id = v.get_v_id()
		a_sign_pk = v.get_keys()['a_sign_pk']
		a_kem_pk = v.get_keys()['a_kem_pk']
		sign_author_pk_is_valid = self.__s_m_l_rfp_and_l_e_eaek_b.get_author_pk() == m_sign_pk
		l_rfp_and_l_e_eaek_b = self.__s_m_l_rfp_and_l_e_eaek_b.get_data()
		l_rfp = l_rfp_and_l_e_eaek_b['l_rfp']
		l_e_eaek_b = l_rfp_and_l_e_eaek_b['l_e_eaek_b']
		l_rfp_is_valid = check_l_rfp(l_rfp, v_id) and len(l_rfp) == len(l_e_eaek_b)
		l_e_eaek_b_is_valid = self._check_l_e_eaek_b(l_e_eaek_b, a_sign_pk, a_kem_pk) and l_e_eaek_b == sorted(l_e_eaek_b, key=lambda x: hash_data(x))
		return l_rfp_is_valid and l_e_eaek_b_is_valid and sign_author_pk_is_valid

	@staticmethod
	def _check_l_e_eaek_b(l_e_eaek_b, a_sign_pk, a_kem_pk):
		for e_eaek_b in l_e_eaek_b:
			ek_ea = e_eaek_b['ek_ea']
			if ek_ea.get_recipient_keys() != (a_sign_pk, a_kem_pk):
				return False
		return True


def check_l_rfp(l_rfp, v_id):
	for rfp in l_rfp:
		if rfp.get_data() != v_id or not rfp.verify():
			return False
	sorted_correctly = l_rfp == sorted(l_rfp)
	return True and sorted_correctly


class MsgVotingSummary:

	def __init__(self, voting_summary, a_sign_pk, a_sign_sk):
		self.__s_a_voting_summary = Sign(voting_summary, a_sign_pk, a_sign_sk)

	def get_data(self):
		return {
			's_a_voting_summary': self.__s_a_voting_summary
		}

	def check(self, v_id, d_m_pk, a_sign_pk, a_kem_pk):
		s_a_voting_summary = self.__s_a_voting_summary
		sign_is_valid = s_a_voting_summary.verify() and s_a_voting_summary.get_author_pk() == a_sign_pk
		voting_summary = s_a_voting_summary.get_data()
		for m_sign_pk, l_rfp_and_l_b in voting_summary.items():
			if m_sign_pk not in d_m_pk:
				return False
			l_rfp, l_b = l_rfp_and_l_b['l_rfp'], l_rfp_and_l_b['l_b']
			l_rfp_is_valid = check_l_rfp(l_rfp, v_id) and len(l_rfp) == len(l_b)
			l_b_is_valid = l_b == sorted(l_b)
			# тут добавить нормальную проверку бюллетеней
			if not l_rfp_is_valid or not l_b_is_valid:
				return False
		return True

	def count_votes(self):
		voting_summary = self.__s_a_voting_summary.get_data()
		votes = {}
		for _, l_rfp_and_l_b in voting_summary.items():
			l_b = l_rfp_and_l_b['l_b']
			for b in l_b:
				choice = b.get_choice()
				if choice in votes:
					votes[choice] += 1
				else:
					votes[choice] = 1
		return votes
