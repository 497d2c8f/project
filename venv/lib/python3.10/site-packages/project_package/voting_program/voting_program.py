from project_package.voting_protocol import *
from Crypto.Random import get_random_bytes
from project_package.ballot import Ballot
from project_package.otkauth import OTK
from project_package.serialization import *
from project_package.message import *
from project_package.files import *
import pyperclip
import os


EXIT = '0'
ELECTOR_MODE = '1'
MEDIATOR_MODE = '2'
AGENCY_MODE = '3'
READ_MSG_VOTING_SUMMARY_FILE = '4'
CREATE_NEW_FILE_WITH_KEYS = '5'
CREATE_FILE_WITH_PUBLIC_KEYS = '6'
COPY_PUBLIC_KEYS_TO_CLIPBOARD = '7'
CREATE_ONE_TIME_KEY_WITH_SPECIAL_CODE = '8'


def get_l_vp_sign_pk():
	l_vp_sign_pk = []
	if input('\nВ голосовании может участвовать любой желающий?\n\n1. Да\n2. Нет\n\nВыберите и нажмите Enter: ') == '2':
		keys_public_files_dir = format_path(input('\nПеретащите сюда папку с открытыми ключами участников, допущенных до голосования, и нажмите Enter: '))
		keys_public_filepaths = get_filepaths('keys_public__*', directory=keys_public_files_dir, full_path=True)
		for path in keys_public_filepaths:
			try:
				l_vp_sign_pk.append(read_file(path)['sign_pk'])
			except:
				pass
	return l_vp_sign_pk


def get_voting_text():
	print('\nНачинаем создавать голосование.')
	question = input('\nВведите вопрос и нажмите Enter: ')
	description = input('\nВведите описание и нажмите Enter: ')
	options = []
	options_number = int(input('\nВведите количество вариантов ответа и нажмите Enter: '))
	while options_number:
		options.append(input('\nВведите вариант ответа и нажмите Enter: '))
		options_number -= 1
	return {
		'question': question,
		'description': description,
		'options': options
	}


def get_formatted_voting_result_text(s_a_vres):
	if not s_a_vres.verify():
		raise Exception('Подпись результата голосования не прошла проверку')
	vres = s_a_vres.get_data()
	v_id = None
	voting_ballots = {}
	voting_result = {}
	for m_sign_pk, l_rfp, l_b in vres:
		for b in l_b:
			choice = b.get_choice()
			voting_ballots[b.get_b_id()] = choice
			if choice in voting_result:
				voting_result[choice] += 1
			else:
				voting_result[choice] = 1
			if v_id == None:
				v_id = b.get_v_id()
			elif v_id != b.get_v_id():
				raise Exception('Попался бюллетень из другого голосования')

	formatted_voting_result = f'\nРезультат голосования #{v_id[0:4].hex()}...:\n\n{"Номер варианта ответа":<25}{"Количество голосов":<25}'
	for choice, number in sorted(voting_result.items()):
		formatted_voting_result += f'\n{choice:<25}{number:<25}'
	return formatted_voting_result




print('''
#################################################
П Р О Г Р А М М А   Д Л Я   Г О Л О С О В А Н И Я
#################################################''')




keys_file_data = read_keys_file()
main_key = keys_file_data['main_key']




print('\nРежимы работы:\n\n0. Выход\n1. Голосующий\n2. Посредник\n3. Агенство\n4. Прочитать файл с результатами голосования\n5. Создать новый файл с ключами\n6. Создать файл с публичными ключами\n7. Скопировать публичные ключи в буфер обмена\n8. Создать одноразовый ключ при помощи специального кода')
option_1 = input('\nВыберите режим работы и нажмите Enter: ')




if option_1 == EXIT:

	sys.exit(1)




if option_1 == ELECTOR_MODE:

	voting_filepath = format_path(input('\nПеретащите сюда файл голосования "voting__*" и нажмите Enter: '))
	voting = read_file(voting_filepath)['voting']
	print('\nОзнакомьтесь с голосованием.')
	print(voting.pretty_text())
	choice = int(input('\nВведите выбранный номер ответа и нажмите Enter: '))
	ballot = Ballot(voting.get_v_id(), choice)
	e_data = create_msg_em(
		voting,
		ballot,
		keys_file_data
	)
	e_data_filepath = os.path.join(VOTINGS_WD, e_data['v'].get_v_id()[0:8].hex(), f'e_data__{e_data["v"].get_v_id()[0:8].hex()}_{keys_file_data["sign_pk"][0:8].hex()}')
	msg_em_filepath = os.path.join(VOTINGS_WD, e_data['v'].get_v_id()[0:8].hex(), f'msg_em__{e_data["v"].get_v_id()[0:8].hex()}_{keys_file_data["sign_pk"][0:8].hex()}_{e_data["m_sign_pk"][0:8].hex()}')
	write_file(e_data_filepath, main_key, **e_data)
	write_file(msg_em_filepath, msg_em=e_data['msg_em'])

	print(f'\nВы успешно проголосовали и создали файл "{msg_em_filepath}". Загрузите его на страницу голосования, чтобы Ваш голос был учтён, и ожидайте итогов.')




if option_1 == MEDIATOR_MODE:

	option_2 = input('\n0. Выход\n1. Первый этап\n2. Второй этап\n\nВыберите и нажмите Enter: ')

	if option_2 == EXIT:

		sys.exit(1)

	if option_2 == '1':

		voting_filepath = format_path(input('\nПеретащите сюда файл голосования "voting__*" и нажмите Enter: '))
		voting = read_file(voting_filepath)['voting']
		msg_wm_1_filepath = format_path(input('\nПеретащите сюда файл "msg_wm_1__*" и нажмите Enter: '))
		msg_wm_1 = read_file(msg_wm_1_filepath)['msg_wm_1']

		m_data = create_msg_mw(
			voting,
			msg_wm_1,
			keys_file_data
		)
#
		m_data_filepath = os.path.join(VOTINGS_WD, m_data['v'].get_v_id()[0:8].hex(), f'm_data__{m_data["v"].get_v_id()[0:8].hex()}_{keys_file_data["sign_pk"][0:8].hex()}')
		msg_mw_filepath = os.path.join(VOTINGS_WD, m_data['v'].get_v_id()[0:8].hex(), f'msg_mw__{m_data["v"].get_v_id()[0:8].hex()}_{keys_file_data["sign_pk"][0:8].hex()}_{bytes(8).hex()}')
		write_file(m_data_filepath, main_key, **m_data)
		write_file(msg_mw_filepath, msg_mw=m_data['msg_mw'])

		print(f'\nВы успешно прошли первый этап и создали файл "{msg_mw_filepath}". Загрузите его на страницу голосования, чтобы продолжить выполнение протокола.')

	if option_2 == '2':

		voting_dirpath = get_voting_dirpath()
		voting_dirname = os.path.basename(voting_dirpath)
		m_data_filepath = get_filepaths(f'm_data__{voting_dirname}_*', directory=voting_dirpath, full_path=True)[0]
		m_data = read_file(m_data_filepath, main_key)
		msg_wm_2_filepath = format_path(input('\nПеретащите сюда с файл "msg_wm_2__*" и нажмите Enter: '))
		msg_wm_2 = read_file(msg_wm_2_filepath)['msg_wm_2']

		create_msg_ma_data = create_msg_ma(
			msg_wm_2,
			m_data['l_e_eaek_b'],
			m_data['v'].get_v_id(),
			keys_file_data
		)

		m_data = {**m_data, **create_msg_ma_data}

		write_file(m_data_filepath, main_key, **m_data)
		msg_ma_filepath = os.path.join(VOTINGS_WD, voting_dirname, f'msg_ma__{m_data["v"].get_v_id()[0:8].hex()}_{keys_file_data["sign_pk"][0:8].hex()}_{m_data["a_sign_pk"][0:8].hex()}')
		write_file(msg_ma_filepath, msg_ma=m_data['msg_ma'])

		print(f'\nВы успешно прошли второй этап и создали файл "{msg_ma_filepath}". Загрузите его на страницу голосования, чтобы завершить выполнение протокола.')




if option_1 == AGENCY_MODE:

	option_2 = input('\n0. Выход\n1. Создать файл голосования\n2. Пройти финальный этап голосования\n\nВыберите и нажмите Enter: ')

	if option_2 == EXIT:

		sys.exit(1)

	if option_2 == '1':

		l_vp_sign_pk = get_l_vp_sign_pk()
		voting_text = get_voting_text()
		v = create_voting(l_vp_sign_pk, keys_file_data, voting_text)
		voting_filepath = get_voting_filepath(v)
		write_file(voting_filepath, voting=v)

		print(f'\nФайл голосования "{voting_filepath}" успешно создан.')

	if option_2 == '2':

		voting_filepath = format_path(input('\nПеретащите сюда скачанный с сайта файл "voting__*" и нажмите Enter: '))
		voting = read_file(voting_filepath)['voting']
		msg_wa_filepath = format_path(input('\nПеретащите сюда файл с сообщениями посредников "msg_wa__*" и нажмите Enter: '))
		msg_wa = read_file(msg_wa_filepath)['msg_wa']

		a_data = create_msg_voting_summary(
			msg_wa,
			voting,
			keys_file_data
		)

		a_data_filepath = os.path.join(VOTINGS_WD, a_data['v'].get_v_id()[0:8].hex(), f'a_data__{a_data["v"].get_v_id()[0:8].hex()}_{keys_file_data["sign_pk"][0:8].hex()}')
		msg_voting_summary_filepath = os.path.join(VOTINGS_WD, a_data['v'].get_v_id()[0:8].hex(), f'msg_voting_summary__{a_data["v"].get_v_id()[0:8].hex()}_{keys_file_data["sign_pk"][0:8].hex()}_{bytes(8).hex()}')
		write_file(a_data_filepath, main_key, **a_data)
		write_file(msg_voting_summary_filepath, msg_voting_summary=a_data['msg_voting_summary'])

#		print(get_formatted_voting_result_text(a_data['msg_voting_summary']))

		print(f'\nФинальный этап голосования успешно пройден.\nФайл с результатами голосования "{msg_voting_summary_filepath}" успешно создан.')




if option_1 == READ_MSG_VOTING_SUMMARY_FILE:

	s_a_vres_filepath = input('\nПеретащите сюда файл "s_a_vres__*" и нажмите Enter: ').replace('\'', '').strip()
	s_a_vres = read_file(s_a_vres_filepath)['s_a_vres']
	print(get_formatted_voting_result_text(s_a_vres))




if option_1 == CREATE_NEW_FILE_WITH_KEYS:

	write_keys_file()




if option_1 == CREATE_FILE_WITH_PUBLIC_KEYS:

	keys_public_filepath = get_keys_public_filepath(keys_file_data)
	write_file(keys_public_filepath, sign_pk=keys_file_data['sign_pk'], kem_pk=keys_file_data['kem_pk'])
	print(f'\nФайл с публичными ключами "{keys_public_filepath}" создан.')




if option_1 == COPY_PUBLIC_KEYS_TO_CLIPBOARD:

	pyperclip.copy(serialize_to_string({'sign_pk': keys_file_data['sign_pk'], 'kem_pk': keys_file_data['kem_pk']}).hex())
	print(f'\nПубличные ключи скопированы в буфер обмена.')




if option_1 == CREATE_ONE_TIME_KEY_WITH_SPECIAL_CODE:

	while True:
		input_string = input('\nСкопируйте сюда код для создания одноразового ключа либо введите 0 (ноль) для отмены и нажмите Enter: ')
		if input_string == EXIT:
			break
		otk_request = deserialize_from_string(bytes.fromhex(input_string))
		otk = serialize_to_string(OTK(main_key, otk_request)).hex()
		pyperclip.copy(otk)
		print(f'\nОдноразовый ключ скопирован в буфер обмена.')
